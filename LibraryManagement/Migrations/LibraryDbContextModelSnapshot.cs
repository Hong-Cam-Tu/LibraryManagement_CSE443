// <auto-generated />
using System;
using LibraryManagement.data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagement.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagement.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("LibraryManagement.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Pdf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishedYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TotalCopies")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 0,
                            AvailableCopies = 7,
                            BookCode = "CSPROG001",
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 5, 5, 9, 38, 44, 191, DateTimeKind.Local).AddTicks(852),
                            Description = "An introductory book on C# programming.",
                            PublishedYear = new DateTime(2022, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Andrew Troelsen",
                            Title = "Learning C#",
                            TotalCopies = 10
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 0,
                            AvailableCopies = 5,
                            BookCode = "ASP001",
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 7, 5, 9, 38, 44, 191, DateTimeKind.Local).AddTicks(862),
                            Description = "A comprehensive guide to mastering ASP.NET Core.",
                            PublishedYear = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Web Dev Publishers",
                            Title = "Mastering ASP.NET Core",
                            TotalCopies = 8
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 0,
                            AvailableCopies = 10,
                            BookCode = "FIC001",
                            CategoryId = 2,
                            CreatedDate = new DateTime(1927, 11, 5, 9, 38, 44, 191, DateTimeKind.Local).AddTicks(865),
                            Description = "A classic novel set in the Roaring Twenties.",
                            PublishedYear = new DateTime(1925, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Literary Classics",
                            Title = "The Great Gatsby",
                            TotalCopies = 15
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 0,
                            AvailableCopies = 6,
                            BookCode = "FIC002",
                            CategoryId = 2,
                            CreatedDate = new DateTime(1961, 11, 5, 9, 38, 44, 191, DateTimeKind.Local).AddTicks(868),
                            Description = "A novel about racial injustice in the American South.",
                            PublishedYear = new DateTime(1960, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Harper & Brothers",
                            Title = "To Kill a Mockingbird",
                            TotalCopies = 12
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 0,
                            AvailableCopies = 15,
                            BookCode = "SCI001",
                            CategoryId = 3,
                            CreatedDate = new DateTime(1966, 11, 5, 9, 38, 44, 191, DateTimeKind.Local).AddTicks(870),
                            Description = "A science fiction novel set on the desert planet Arrakis.",
                            PublishedYear = new DateTime(1965, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Sci-Fi Press",
                            Title = "Dune",
                            TotalCopies = 20
                        },
                        new
                        {
                            BookId = 6,
                            AuthorId = 0,
                            AvailableCopies = 14,
                            BookCode = "SCI002",
                            CategoryId = 3,
                            CreatedDate = new DateTime(1952, 11, 5, 9, 38, 44, 191, DateTimeKind.Local).AddTicks(872),
                            Description = "A novel about the decline and fall of a Galactic Empire.",
                            PublishedYear = new DateTime(1951, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Galaxy Publications",
                            Title = "Foundation",
                            TotalCopies = 18
                        });
                });

            modelBuilder.Entity("LibraryManagement.Models.Carousel", b =>
                {
                    b.Property<int>("CarouselId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarouselId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LinkUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CarouselId");

                    b.ToTable("Carousels");

                    b.HasData(
                        new
                        {
                            CarouselId = 1,
                            CreatedDate = new DateTime(2024, 11, 5, 9, 38, 44, 191, DateTimeKind.Local).AddTicks(637),
                            Description = "Image1",
                            ImageUrl = "/carousel_images/carousel_1.webp",
                            IsActive = true,
                            Order = 1,
                            Title = "Image 1",
                            UpdatedDate = new DateTime(2024, 11, 5, 9, 38, 44, 191, DateTimeKind.Local).AddTicks(653)
                        },
                        new
                        {
                            CarouselId = 2,
                            CreatedDate = new DateTime(2024, 11, 5, 9, 38, 44, 191, DateTimeKind.Local).AddTicks(655),
                            Description = "Image2",
                            ImageUrl = "/carousel_images/carousel_2.webp",
                            IsActive = true,
                            Order = 2,
                            Title = "Image 2",
                            UpdatedDate = new DateTime(2024, 11, 5, 9, 38, 44, 191, DateTimeKind.Local).AddTicks(656)
                        },
                        new
                        {
                            CarouselId = 3,
                            CreatedDate = new DateTime(2024, 11, 5, 9, 38, 44, 191, DateTimeKind.Local).AddTicks(657),
                            Description = "Image3",
                            ImageUrl = "/carousel_images/carousel_3.webp",
                            IsActive = true,
                            Order = 3,
                            Title = "Image 3",
                            UpdatedDate = new DateTime(2024, 11, 5, 9, 38, 44, 191, DateTimeKind.Local).AddTicks(658)
                        });
                });

            modelBuilder.Entity("LibraryManagement.Models.Categories", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Programming"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Fiction"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Science fiction"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Models.Loan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoanId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("LibraryManagement.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("ActiveCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LibraryManagement.Models.Book", b =>
                {
                    b.HasOne("LibraryManagement.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Models.Categories", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LibraryManagement.Models.Loan", b =>
                {
                    b.HasOne("LibraryManagement.Models.Book", "Book")
                        .WithMany("Loans")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Models.User", "User")
                        .WithMany("Loans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryManagement.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryManagement.Models.Book", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("LibraryManagement.Models.Categories", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryManagement.Models.User", b =>
                {
                    b.Navigation("Loans");
                });
#pragma warning restore 612, 618
        }
    }
}
